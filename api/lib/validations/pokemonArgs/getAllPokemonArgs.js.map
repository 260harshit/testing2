{"version":3,"sources":["../../../../src/lib/validations/pokemonArgs/getAllPokemonArgs.ts"],"sourcesContent":["import type { NonNullish } from '#utils/utilTypes';\nimport { baseFuzzySchema, type BaseFuzzyArgs } from '#validations/fuzzyArgs/base.ts';\nimport { basePokemonArgsSchema, type BasePokemonArgs } from '#validations/pokemonArgs/base';\nimport { s, type SchemaOf } from '@sapphire/shapeshift';\nimport type { Nullish } from '@sapphire/utilities';\n\nexport interface GetAllPokemonArgs extends BaseFuzzyArgs, BasePokemonArgs {\n  /**\n   * Sets the offset where to start\n   * @default 0\n   * @minimum 0\n   * @maximum 1389\n   */\n  offset: number | Nullish;\n  /**\n   * Return only this many results, starting from the offset\n   * @default 1392\n   * @minimum 1\n   * @maximum 1392\n   */\n  take: number | Nullish;\n}\n\nconst getAllPokemonSchema: SchemaOf<GetAllPokemonArgs> = baseFuzzySchema //\n  .extend(basePokemonArgsSchema)\n  .extend({\n    offset: s.number\n      .greaterThanOrEqual(0)\n      .lessThanOrEqual(1389)\n      .nullish.transform((v) => v ?? 0),\n    take: s.number\n      .greaterThanOrEqual(1)\n      .lessThanOrEqual(1392)\n      .nullish.transform((v) => v ?? 1)\n  });\n\nexport function validateGetAllPokemonArgs(args: GetAllPokemonArgs): NonNullish<GetAllPokemonArgs> {\n  return getAllPokemonSchema.parse(args);\n}\n"],"mappings":";;AACA,SAAS,uBAA2C;AACpD,SAAS,6BAAmD;AAC5D,SAAS,SAAwB;AAoBjC,MAAM,sBAAmD,gBACtD,OAAO,qBAAqB,EAC5B,OAAO;AAAA,EACN,QAAQ,EAAE,OACP,mBAAmB,CAAC,EACpB,gBAAgB,IAAI,EACpB,QAAQ,UAAU,CAAC,MAAM,KAAK,CAAC;AAAA,EAClC,MAAM,EAAE,OACL,mBAAmB,CAAC,EACpB,gBAAgB,IAAI,EACpB,QAAQ,UAAU,CAAC,MAAM,KAAK,CAAC;AACpC,CAAC;AAEI,SAAS,0BAA0B,MAAwD;AAChG,SAAO,oBAAoB,MAAM,IAAI;AACvC;AAFgB;","names":[]}