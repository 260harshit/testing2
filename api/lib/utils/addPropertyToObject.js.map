{"version":3,"sources":["../../../src/lib/utils/addPropertyToObject.ts"],"sourcesContent":["import type { GraphQLSet } from '#utils/GraphQLSet';\nimport { isFunction, isNullish } from '@sapphire/utilities';\n\nexport function addPropertyToObjectConditional<T extends object, K extends keyof T>({\n  objectTarget,\n  propertyKey,\n  propertyValue,\n  condition\n}: AddPropertyToObjectConditionalParameters<T, K>): T {\n  if (condition) {\n    addPropertyToObject({\n      objectTarget,\n      propertyKey,\n      propertyValue\n    });\n  }\n\n  return objectTarget;\n}\n\nexport function addPropertyToObjectFieldBased<T extends object, K extends keyof T>({\n  objectTarget,\n  propertyKey,\n  propertyValue,\n  requestedFields,\n  fieldAccessor = propertyKey as string\n}: AddPropertyToObjectParameters<T, K>): T {\n  if (requestedFields.has(fieldAccessor as K)) {\n    addPropertyToObject({\n      objectTarget,\n      propertyKey,\n      propertyValue\n    });\n  }\n\n  return objectTarget;\n}\n\nfunction addPropertyToObject<T extends object, K extends keyof T>({\n  objectTarget,\n  propertyKey,\n  propertyValue\n}: Omit<AddPropertyToObjectParameters<T, K>, 'requestedFields' | 'fieldAccessor'>): void {\n  const resolvedPropertyValue = isFunction(propertyValue) ? (propertyValue as () => T[K] | null)() : propertyValue;\n\n  if (!isNullish(resolvedPropertyValue)) {\n    Reflect.set(objectTarget, propertyKey, resolvedPropertyValue);\n  }\n}\n\ntype AddPropertyToObjectConditionalParameters<T extends object, K extends keyof T> = Omit<\n  AddPropertyToObjectParameters<T, K>,\n  'requestedFields' | 'fieldAccessor'\n> & {\n  condition: boolean;\n};\n\ninterface AddPropertyToObjectParameters<T extends object, K extends keyof T> {\n  objectTarget: T;\n  propertyKey: K;\n  propertyValue: T[K] | (() => T[K] | null);\n  requestedFields: GraphQLSet<K>;\n  fieldAccessor?: string;\n}\n"],"mappings":";;AACA,SAAS,YAAY,iBAAiB;AAE/B,SAAS,+BAAoE;AAAA,EAClF;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAAsD;AACpD,MAAI,WAAW;AACb,wBAAoB;AAAA,MAClB;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH;AAEA,SAAO;AACT;AAfgB;AAiBT,SAAS,8BAAmE;AAAA,EACjF;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,gBAAgB;AAClB,GAA2C;AACzC,MAAI,gBAAgB,IAAI,aAAkB,GAAG;AAC3C,wBAAoB;AAAA,MAClB;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH;AAEA,SAAO;AACT;AAhBgB;AAkBhB,SAAS,oBAAyD;AAAA,EAChE;AAAA,EACA;AAAA,EACA;AACF,GAAyF;AACvF,QAAM,wBAAwB,WAAW,aAAa,IAAK,cAAoC,IAAI;AAEnG,MAAI,CAAC,UAAU,qBAAqB,GAAG;AACrC,YAAQ,IAAI,cAAc,aAAa,qBAAqB;AAAA,EAC9D;AACF;AAVS;","names":[]}