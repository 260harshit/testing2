{"version":3,"sources":["../../../src/lib/resolvers/abilityResolvers.ts"],"sourcesContent":["import { abilities } from '#assets/abilities';\nimport { mapAbilityDataToAbilityGraphQL } from '#mappers/abilityMapper';\nimport type { Ability } from '#types';\nimport { FuzzySearch } from '#utils/FuzzySearch';\nimport type { GraphQLSet } from '#utils/GraphQLSet';\nimport { preParseInput } from '#utils/util';\nimport { validateGetFuzzyAbilityArgs, type GetFuzzyAbilityArgs } from '#validations/fuzzyArgs/fuzzyAbilityArgs';\nimport { validateGetAbilityArgs, type GetAbilityArgs } from '#validations/getAbilityArgs';\n\nconst fuzzySearch = new FuzzySearch(abilities, ['name', 'aliases']);\n\n/**\n * Gets the details on a Pokémon ability, using the ability name\n */\nexport function getAbility(args: GetAbilityArgs, requestedFields: GraphQLSet<keyof Ability>): Ability {\n  args = validateGetAbilityArgs(args);\n\n  const abilityFromDataset = abilities.get(args.ability);\n\n  if (!abilityFromDataset) {\n    throw new Error(`No ability found for ${args.ability}`);\n  }\n\n  const graphqlObject = mapAbilityDataToAbilityGraphQL({ data: abilityFromDataset, requestedFields });\n\n  if (!graphqlObject) {\n    throw new Error(`Failed to get data for ability: ${args.ability}`);\n  }\n\n  return graphqlObject;\n}\n\n/**\n * Gets details on a Pokémon ability, using a fuzzy search on name\n *\n * This can be used to find multiple results based on the query\n *\n * By default only 1 result is returned. You can provide the arguments `take`, `offset`, and `reverse` to modify this behaviour.\n */\nexport function getFuzzyAbility(args: GetFuzzyAbilityArgs, requestedFields: GraphQLSet<keyof Ability>): Ability[] {\n  args = validateGetFuzzyAbilityArgs(args);\n\n  let { ability } = args;\n  const { offset, reverse, take } = args;\n\n  ability = preParseInput(ability);\n\n  const fuzzyResult = fuzzySearch.runFuzzy(ability);\n\n  if (reverse) {\n    fuzzyResult.reverse();\n  }\n\n  const fuzzyEntries = fuzzyResult.slice(offset!, offset! + take!);\n\n  if (!fuzzyEntries.length) {\n    throw new Error(`No abilities found for: ${args.ability}`);\n  }\n\n  const graphqlObjects = fuzzyEntries.map((abilityData) => mapAbilityDataToAbilityGraphQL({ data: abilityData, requestedFields }));\n\n  if (!graphqlObjects.length) {\n    throw new Error(`Failed to get data for ability: ${args.ability}`);\n  }\n\n  return graphqlObjects;\n}\n"],"mappings":";;AAAA,SAAS,iBAAiB;AAC1B,SAAS,sCAAsC;AAE/C,SAAS,mBAAmB;AAE5B,SAAS,qBAAqB;AAC9B,SAAS,mCAA6D;AACtE,SAAS,8BAAmD;AAE5D,MAAM,cAAc,IAAI,YAAY,WAAW,CAAC,QAAQ,SAAS,CAAC;AAK3D,SAAS,WAAW,MAAsB,iBAAqD;AACpG,SAAO,uBAAuB,IAAI;AAElC,QAAM,qBAAqB,UAAU,IAAI,KAAK,OAAO;AAErD,MAAI,CAAC,oBAAoB;AACvB,UAAM,IAAI,MAAM,wBAAwB,KAAK,SAAS;AAAA,EACxD;AAEA,QAAM,gBAAgB,+BAA+B,EAAE,MAAM,oBAAoB,gBAAgB,CAAC;AAElG,MAAI,CAAC,eAAe;AAClB,UAAM,IAAI,MAAM,mCAAmC,KAAK,SAAS;AAAA,EACnE;AAEA,SAAO;AACT;AAhBgB;AAyBT,SAAS,gBAAgB,MAA2B,iBAAuD;AAChH,SAAO,4BAA4B,IAAI;AAEvC,MAAI,EAAE,QAAQ,IAAI;AAClB,QAAM,EAAE,QAAQ,SAAS,KAAK,IAAI;AAElC,YAAU,cAAc,OAAO;AAE/B,QAAM,cAAc,YAAY,SAAS,OAAO;AAEhD,MAAI,SAAS;AACX,gBAAY,QAAQ;AAAA,EACtB;AAEA,QAAM,eAAe,YAAY,MAAM,QAAS,SAAU,IAAK;AAE/D,MAAI,CAAC,aAAa,QAAQ;AACxB,UAAM,IAAI,MAAM,2BAA2B,KAAK,SAAS;AAAA,EAC3D;AAEA,QAAM,iBAAiB,aAAa,IAAI,CAAC,gBAAgB,+BAA+B,EAAE,MAAM,aAAa,gBAAgB,CAAC,CAAC;AAE/H,MAAI,CAAC,eAAe,QAAQ;AAC1B,UAAM,IAAI,MAAM,mCAAmC,KAAK,SAAS;AAAA,EACnE;AAEA,SAAO;AACT;AA3BgB;","names":[]}