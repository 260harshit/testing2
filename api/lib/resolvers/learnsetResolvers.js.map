{"version":3,"sources":["../../../src/lib/resolvers/learnsetResolvers.ts"],"sourcesContent":["import { moves } from '#assets/moves';\nimport { pokedex } from '#assets/pokedex';\nimport { mapPokemonAndMovesToLearnsetGraphQL } from '#mappers/learnsetMapper';\nimport { fuzzySearch as moveFuzzySearch } from '#resolvers/moveResolvers';\nimport { fuzzySearch as pokemonFuzzySearch } from '#resolvers/pokemonResolvers';\nimport type { Learnset } from '#types';\nimport type { GraphQLSet } from '#utils/GraphQLSet';\nimport { toLowerSingleWordCase } from '#utils/util';\nimport type { NonNullish } from '#utils/utilTypes';\nimport { validateGetLearnsetArgs, type GetLearnsetArgs } from '#validations/getLearnsetArgs';\nimport { lazy } from '@sapphire/utilities';\n\nconst formatter = lazy(() => new Intl.ListFormat('en', { style: 'long', type: 'conjunction' }));\n\n/**\n * Gets the learnsets for a given Pokémon and move.\n *\n * Multiple moves are possible by putting them in an array: `[move1, move2]`.\n *\n * You can also apply a generation filter (only results for the given generation will be returned) with the generation argument\n */\nexport function getLearnset(args: NonNullish<GetLearnsetArgs>, requestedFields: GraphQLSet<keyof Learnset>): Learnset {\n  args = validateGetLearnsetArgs(args);\n\n  const graphqlObject = mapPokemonAndMovesToLearnsetGraphQL({ args, requestedFields });\n\n  if (!graphqlObject) {\n    const movesString = args.moves.length > 1 ? 'moves' : 'move';\n    const movesList = formatter().format(args.moves);\n    const generationString = args.generation ? ` with generation filter set to ${args.generation}` : '';\n\n    throw new Error(`Failed to get learnsets for the combination of Pokémon \"${args.pokemon}\", and ${movesString} \"${movesList}\"${generationString}`);\n  }\n\n  return graphqlObject;\n}\n\n/**\n * Gets the learnset for a given Pokémon and move.\n *\n * A fuzzy search is performed to find a matching Pokémon and move\n *\n * Multiple moves are possible by putting them in an array: `[move1, move2]`.\n *\n * You can also apply a generation filter (only results for the given generation will be returned) with the generation argument\n */\nexport function getFuzzyLearnset(args: NonNullish<GetLearnsetArgs>, requestedFields: GraphQLSet<keyof Learnset>): Learnset {\n  args = validateGetLearnsetArgs(args);\n\n  // Try and get an exactly matching Pokémon\n  const pokemonData = pokedex.get(args.pokemon);\n\n  // If it not an exact move then perform a fuzzy search\n  if (!pokemonData) {\n    const fuzzyEntry = pokemonFuzzySearch.runFuzzy(args.pokemon);\n    if (fuzzyEntry === undefined || !fuzzyEntry.length) {\n      throw new Error(`Failed to get data for Pokémon: ${args.pokemon}`);\n    }\n    args.pokemon = toLowerSingleWordCase(fuzzyEntry[0].species);\n  }\n\n  for (const [index, move] of args.moves.entries()) {\n    // Try and get an exactly matching move\n    const moveFromDataset = moves.get(move);\n\n    // If it not an exact move then perform a fuzzy search\n    if (!moveFromDataset) {\n      const fuzzyEntry = moveFuzzySearch.runFuzzy(move);\n\n      if (fuzzyEntry === undefined || !fuzzyEntry.length) {\n        throw new Error(`Failed to get data for move: ${move}`);\n      }\n\n      // And overwrite the move at  this index with the proper entry\n      args.moves[index] = toLowerSingleWordCase(fuzzyEntry[0].name);\n    }\n  }\n\n  return getLearnset(args, requestedFields);\n}\n"],"mappings":";;AAAA,SAAS,aAAa;AACtB,SAAS,eAAe;AACxB,SAAS,2CAA2C;AACpD,SAAS,eAAe,uBAAuB;AAC/C,SAAS,eAAe,0BAA0B;AAGlD,SAAS,6BAA6B;AAEtC,SAAS,+BAAqD;AAC9D,SAAS,YAAY;AAErB,MAAM,YAAY,KAAK,MAAM,IAAI,KAAK,WAAW,MAAM,EAAE,OAAO,QAAQ,MAAM,cAAc,CAAC,CAAC;AASvF,SAAS,YAAY,MAAmC,iBAAuD;AACpH,SAAO,wBAAwB,IAAI;AAEnC,QAAM,gBAAgB,oCAAoC,EAAE,MAAM,gBAAgB,CAAC;AAEnF,MAAI,CAAC,eAAe;AAClB,UAAM,cAAc,KAAK,MAAM,SAAS,IAAI,UAAU;AACtD,UAAM,YAAY,UAAU,EAAE,OAAO,KAAK,KAAK;AAC/C,UAAM,mBAAmB,KAAK,aAAa,kCAAkC,KAAK,eAAe;AAEjG,UAAM,IAAI,MAAM,8DAA2D,KAAK,iBAAiB,gBAAgB,aAAa,kBAAkB;AAAA,EAClJ;AAEA,SAAO;AACT;AAdgB;AAyBT,SAAS,iBAAiB,MAAmC,iBAAuD;AACzH,SAAO,wBAAwB,IAAI;AAGnC,QAAM,cAAc,QAAQ,IAAI,KAAK,OAAO;AAG5C,MAAI,CAAC,aAAa;AAChB,UAAM,aAAa,mBAAmB,SAAS,KAAK,OAAO;AAC3D,QAAI,eAAe,UAAa,CAAC,WAAW,QAAQ;AAClD,YAAM,IAAI,MAAM,sCAAmC,KAAK,SAAS;AAAA,IACnE;AACA,SAAK,UAAU,sBAAsB,WAAW,CAAC,EAAE,OAAO;AAAA,EAC5D;AAEA,aAAW,CAAC,OAAO,IAAI,KAAK,KAAK,MAAM,QAAQ,GAAG;AAEhD,UAAM,kBAAkB,MAAM,IAAI,IAAI;AAGtC,QAAI,CAAC,iBAAiB;AACpB,YAAM,aAAa,gBAAgB,SAAS,IAAI;AAEhD,UAAI,eAAe,UAAa,CAAC,WAAW,QAAQ;AAClD,cAAM,IAAI,MAAM,gCAAgC,MAAM;AAAA,MACxD;AAGA,WAAK,MAAM,KAAK,IAAI,sBAAsB,WAAW,CAAC,EAAE,IAAI;AAAA,IAC9D;AAAA,EACF;AAEA,SAAO,YAAY,MAAM,eAAe;AAC1C;AAjCgB;","names":[]}