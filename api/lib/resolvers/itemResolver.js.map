{"version":3,"sources":["../../../src/lib/resolvers/itemResolver.ts"],"sourcesContent":["import { items } from '#assets/items';\nimport { mapItemDataToItemGraphQL } from '#mappers/itemMapper';\nimport type { Item } from '#types';\nimport { FuzzySearch } from '#utils/FuzzySearch';\nimport type { GraphQLSet } from '#utils/GraphQLSet';\nimport { preParseInput } from '#utils/util';\nimport { validateGetFuzzyItemArgs, type GetFuzzyItemArgs } from '#validations/fuzzyArgs/fuzzyItemArgs';\nimport { validateGetItemArgs, type GetItemArgs } from '#validations/getItemArgs';\n\nconst fuzzySearch = new FuzzySearch(items, ['name', 'aliases']);\n\n/**\n * Gets the details on a Pokémon item, using the item name\n */\nexport function getItem(args: GetItemArgs, requestedFields: GraphQLSet<keyof Item>): Item {\n  args = validateGetItemArgs(args);\n\n  const itemFromDataset = items.get(args.item);\n\n  if (!itemFromDataset) {\n    throw new Error(`No item found for ${args.item}`);\n  }\n\n  const graphqlObject = mapItemDataToItemGraphQL({ data: itemFromDataset, requestedFields });\n\n  if (!graphqlObject) {\n    throw new Error(`Failed to get data for item: ${args.item}`);\n  }\n\n  return graphqlObject;\n}\n\n/**\n * Gets details on a Pokémon item, using a fuzzy search on name\n *\n * This can be used to find multiple results based on the query\n *\n * By default only 1 result is returned. You can provide the arguments `take`, `offset`, and `reverse` to modify this behaviour.\n */\nexport function getFuzzyItem(args: GetFuzzyItemArgs, requestedFields: GraphQLSet<keyof Item>): Item[] {\n  args = validateGetFuzzyItemArgs(args);\n\n  let { item } = args;\n  const { offset, reverse, take } = args;\n\n  item = preParseInput(item);\n\n  const fuzzyResult = fuzzySearch.runFuzzy(item);\n\n  if (reverse) {\n    fuzzyResult.reverse();\n  }\n\n  const fuzzyEntries = fuzzyResult.slice(offset!, offset! + take!);\n\n  if (!fuzzyEntries.length) {\n    throw new Error(`No items found for: ${args.item}`);\n  }\n\n  const graphqlObjects = fuzzyEntries.map((itemData) => mapItemDataToItemGraphQL({ data: itemData, requestedFields }));\n\n  if (!graphqlObjects.length) {\n    throw new Error(`Failed to get data for item: ${args.item}`);\n  }\n\n  return graphqlObjects;\n}\n"],"mappings":";;AAAA,SAAS,aAAa;AACtB,SAAS,gCAAgC;AAEzC,SAAS,mBAAmB;AAE5B,SAAS,qBAAqB;AAC9B,SAAS,gCAAuD;AAChE,SAAS,2BAA6C;AAEtD,MAAM,cAAc,IAAI,YAAY,OAAO,CAAC,QAAQ,SAAS,CAAC;AAKvD,SAAS,QAAQ,MAAmB,iBAA+C;AACxF,SAAO,oBAAoB,IAAI;AAE/B,QAAM,kBAAkB,MAAM,IAAI,KAAK,IAAI;AAE3C,MAAI,CAAC,iBAAiB;AACpB,UAAM,IAAI,MAAM,qBAAqB,KAAK,MAAM;AAAA,EAClD;AAEA,QAAM,gBAAgB,yBAAyB,EAAE,MAAM,iBAAiB,gBAAgB,CAAC;AAEzF,MAAI,CAAC,eAAe;AAClB,UAAM,IAAI,MAAM,gCAAgC,KAAK,MAAM;AAAA,EAC7D;AAEA,SAAO;AACT;AAhBgB;AAyBT,SAAS,aAAa,MAAwB,iBAAiD;AACpG,SAAO,yBAAyB,IAAI;AAEpC,MAAI,EAAE,KAAK,IAAI;AACf,QAAM,EAAE,QAAQ,SAAS,KAAK,IAAI;AAElC,SAAO,cAAc,IAAI;AAEzB,QAAM,cAAc,YAAY,SAAS,IAAI;AAE7C,MAAI,SAAS;AACX,gBAAY,QAAQ;AAAA,EACtB;AAEA,QAAM,eAAe,YAAY,MAAM,QAAS,SAAU,IAAK;AAE/D,MAAI,CAAC,aAAa,QAAQ;AACxB,UAAM,IAAI,MAAM,uBAAuB,KAAK,MAAM;AAAA,EACpD;AAEA,QAAM,iBAAiB,aAAa,IAAI,CAAC,aAAa,yBAAyB,EAAE,MAAM,UAAU,gBAAgB,CAAC,CAAC;AAEnH,MAAI,CAAC,eAAe,QAAQ;AAC1B,UAAM,IAAI,MAAM,gCAAgC,KAAK,MAAM;AAAA,EAC7D;AAEA,SAAO;AACT;AA3BgB;","names":[]}