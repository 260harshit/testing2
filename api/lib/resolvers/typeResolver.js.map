{"version":3,"sources":["../../../src/lib/resolvers/typeResolver.ts"],"sourcesContent":["import { mapTypesToTypeMatchupGraphQL } from '#mappers/typeMatchupMapper';\nimport type { TypeMatchup } from '#types';\nimport type { GraphQLSet } from '#utils/GraphQLSet';\nimport { validateGetTypeMatchupArgs, type GetTypeMatchupArgs } from '#validations/getTypeMatchupArgs';\n\nexport function getTypeMatchup(args: GetTypeMatchupArgs, requestedFields: GraphQLSet<keyof TypeMatchup>): TypeMatchup {\n  args = validateGetTypeMatchupArgs(args);\n\n  const entry = mapTypesToTypeMatchupGraphQL(args, requestedFields);\n\n  if (entry === undefined) {\n    const resolvedTypeMatchupArgs = args.secondaryType ? `${args.primaryType} and ${args.secondaryType}` : args.primaryType;\n    throw new Error(`Failed to get type matchups for ${resolvedTypeMatchupArgs}`);\n  }\n\n  return entry;\n}\n"],"mappings":";;AAAA,SAAS,oCAAoC;AAG7C,SAAS,kCAA2D;AAE7D,SAAS,eAAe,MAA0B,iBAA6D;AACpH,SAAO,2BAA2B,IAAI;AAEtC,QAAM,QAAQ,6BAA6B,MAAM,eAAe;AAEhE,MAAI,UAAU,QAAW;AACvB,UAAM,0BAA0B,KAAK,gBAAgB,GAAG,KAAK,mBAAmB,KAAK,kBAAkB,KAAK;AAC5G,UAAM,IAAI,MAAM,mCAAmC,yBAAyB;AAAA,EAC9E;AAEA,SAAO;AACT;AAXgB;","names":[]}