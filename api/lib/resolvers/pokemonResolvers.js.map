{"version":3,"sources":["../../../src/lib/resolvers/pokemonResolvers.ts"],"sourcesContent":["import { pokedex } from '#assets/pokedex';\nimport { mapPokemonDataToPokemonGraphQL } from '#mappers/pokemonMapper';\nimport type { Pokemon } from '#types';\nimport { FuzzySearch } from '#utils/FuzzySearch';\nimport type { GraphQLSet } from '#utils/GraphQLSet';\nimport { preParseInput } from '#utils/util';\nimport type { NonNullish } from '#utils/utilTypes';\nimport { validateGetAllPokemonArgs, type GetAllPokemonArgs } from '#validations/pokemonArgs/getAllPokemonArgs';\nimport { validateGetFuzzyPokemonArgs, type GetFuzzyPokemonArgs } from '#validations/pokemonArgs/getFuzzyPokemonArgs';\nimport { validateGetPokemonArgs, type GetPokemonArgs } from '#validations/pokemonArgs/getPokemonArgs';\nimport { validateGetPokemonByDexNumberArgs, type GetPokemonByDexNumberArgs } from '#validations/pokemonArgs/getPokemonByDexNumberArgs';\n\nexport const fuzzySearch = new FuzzySearch(pokedex, ['num', 'species', 'aliases']);\n\n/**\n * Gets details on a single Pokémon based on National Pokédex number\n *\n * You can provide `takeFlavorTexts` to limit the amount of flavour texts to return, set the offset of where to start with `offsetFlavorTexts`, and reverse the entire array with `reverseFlavorTexts`.\n *\n * **Reversal is applied before pagination!**\n */\nexport function getPokemonByDexNumber(args: NonNullish<GetPokemonByDexNumberArgs>, requestedFields: GraphQLSet<keyof Pokemon>): Pokemon {\n  args = validateGetPokemonByDexNumberArgs(args);\n\n  const pokemonFromDataset = pokedex.find((pokemon) => pokemon.num === args.number);\n\n  if (!pokemonFromDataset) {\n    throw new Error(`No Pokémon found for ${args.number}`);\n  }\n\n  const graphqlObject = mapPokemonDataToPokemonGraphQL({\n    data: pokemonFromDataset,\n    requestedFields,\n    offsetFlavorTexts: args.offsetFlavorTexts,\n    reverseFlavorTexts: args.reverseFlavorTexts,\n    takeFlavorTexts: args.takeFlavorTexts\n  });\n\n  if (!graphqlObject) {\n    throw new Error(`Failed to get data for Pokémon: ${args.number}`);\n  }\n\n  return graphqlObject;\n}\n\n/**\n * Gets details on a single Pokémon based on species name\n *\n * You can provide `takeFlavorTexts` to limit the amount of flavour texts to return, set the offset of where to start with `offsetFlavorTexts`, and reverse the entire array with `reverseFlavorTexts`.\n *\n * **Reversal is applied before pagination!**\n */\nexport function getPokemon(args: NonNullish<GetPokemonArgs>, requestedFields: GraphQLSet<keyof Pokemon>): Pokemon {\n  args = validateGetPokemonArgs(args);\n\n  const pokemonData = pokedex.get(args.pokemon);\n\n  if (!pokemonData) {\n    throw new Error(`No Pokémon found for ${args.pokemon}`);\n  }\n\n  const graphqlObject = mapPokemonDataToPokemonGraphQL({\n    data: pokemonData,\n    offsetFlavorTexts: args.offsetFlavorTexts,\n    reverseFlavorTexts: args.reverseFlavorTexts,\n    takeFlavorTexts: args.takeFlavorTexts,\n    requestedFields\n  });\n\n  if (!graphqlObject) {\n    throw new Error(`Failed to get data for Pokémon: ${args.pokemon}`);\n  }\n\n  return graphqlObject;\n}\n\n/**\n * Returns a list of all the known Pokémon.\n *\n * For every Pokémon all the data on each requested field is returned.\n *\n * **_NOTE:_ To skip all CAP Pokémon, PokéStar Pokémon, and Missingno provide an `offset` of 89**\n *\n * You can provide `take` to limit the amount of Pokémon to return (default: 1), set the offset of where to start with `offset`, and reverse the entire array with `reverse`.\n *\n * You can provide `takeFlavorTexts` to limit the amount of flavour texts to return, set the offset of where to start with `offsetFlavorTexts`, and reverse the entire array with `reverseFlavorTexts`.\n *\n * While the API will currently not rate limit the usage of this query, it may do so in the future.\n *\n * It is advisable to cache responses of this query.\n */\nexport function getAllPokemon(args: NonNullish<GetAllPokemonArgs>, requestedFields: GraphQLSet<keyof Pokemon>): Pokemon[] {\n  args = validateGetAllPokemonArgs(args);\n\n  const clonedPokedex = pokedex.clone();\n\n  if (args.reverse) {\n    clonedPokedex.reverse();\n  }\n\n  const pokemonValues = [...clonedPokedex.values()].slice(args.offset, args.offset + args.take);\n\n  const graphqlObjects: Pokemon[] = [];\n\n  for (const pokemonData of pokemonValues) {\n    graphqlObjects.push(\n      mapPokemonDataToPokemonGraphQL({\n        data: pokemonData,\n        requestedFields,\n        offsetFlavorTexts: 0,\n        reverseFlavorTexts: true,\n        takeFlavorTexts: 1\n      })\n    );\n  }\n\n  if (!graphqlObjects.length) {\n    throw new Error('Failed to get data for Pokémon');\n  }\n\n  return graphqlObjects;\n}\n\n/**\n * Gets details on one or more Pokémon based on species name\n *\n * You can provide `take` to limit the amount of Pokémon to return (default: 1), set the offset of where to start with `offset`, and reverse the entire array with `reverse`.\n *\n * You can provide `takeFlavorTexts` to limit the amount of flavour texts to return, set the offset of where to start with `offsetFlavorTexts`, and reverse the entire array with `reverseFlavorTexts`.\n *\n * **Reversal is applied before pagination!**\n */\nexport function getFuzzyPokemon(args: NonNullish<GetFuzzyPokemonArgs>, requestedFields: GraphQLSet<keyof Pokemon>): Pokemon[] {\n  args = validateGetFuzzyPokemonArgs(args);\n\n  args.pokemon = parseFormeIdentifiers(preParseInput(args.pokemon));\n\n  let fuzzyEntries = fuzzySearch.runFuzzy(args.pokemon);\n\n  if (!fuzzyEntries.length) {\n    throw new Error(`No Pokémon found for ${args.pokemon}`);\n  }\n\n  if (args.reverse) {\n    fuzzyEntries.reverse();\n  }\n\n  fuzzyEntries = fuzzyEntries.slice(args.offset, args.offset + args.take);\n\n  const graphqlObjects: Pokemon[] = [];\n\n  for (const pokemonData of fuzzyEntries) {\n    graphqlObjects.push(\n      mapPokemonDataToPokemonGraphQL({\n        data: pokemonData,\n        requestedFields,\n        offsetFlavorTexts: args.offsetFlavorTexts,\n        reverseFlavorTexts: args.reverseFlavorTexts,\n        takeFlavorTexts: args.takeFlavorTexts\n      })\n    );\n  }\n\n  if (!graphqlObjects.length) {\n    throw new Error(`Failed to get data for Pokémon: ${args.pokemon}`);\n  }\n\n  return graphqlObjects;\n}\n\n/**\n * Parses a Pokémon-like string to have the different form identifiers in their proper places\n * @param pokemon The Pokémon-like string to parse\n * @example\n * ```ts\n * // Given\n * 'mega venusaur'\n * // Transforms into\n * 'venusaur-mega'\n * ```\n * @example\n * ```ts\n * // Given\n * 'gmax charizard'\n * // Transforms into\n * 'charizard-gmax'\n * ```\n * @example\n * ```ts\n * // Given\n * 'gigantamax charizard'\n * // Transforms into\n * 'charizard-gmax'\n * ```\n * @example\n * ```ts\n * // Given\n * 'alolan raichu'\n * // Transforms into\n * 'raichu-alola'\n * ```\n * @example\n * ```ts\n * // Given\n * 'alola raichu'\n * // Transforms into\n * 'raichu-alola'\n * ```\n * @example\n * ```ts\n * // Given\n * 'galar slowbro'\n * // Transforms into\n * 'slowbro-galar'\n * ```\n * @example\n * ```ts\n * // Given\n * 'galarian slowbro'\n * // Transforms into\n * 'slowbro-galar'\n * ```\n * @example\n * ```ts\n * // Given\n * 'paldean tauros'\n * // Transforms into\n * 'tauros-paldea'\n * ```\n */\nfunction parseFormeIdentifiers(pokemon: string) {\n  switch (pokemon.split(' ')[0]) {\n    case 'mega':\n      pokemon = `${pokemon.substring(pokemon.split(' ')[0].length + 1)}-mega`;\n      break;\n    case 'gigantamax':\n    case 'gmax':\n      pokemon = `${pokemon.substring(pokemon.split(' ')[0].length + 1)}-gmax`;\n      break;\n    case 'alola':\n    case 'alolan':\n      pokemon = `${pokemon.substring(pokemon.split(' ')[0].length + 1)}-alola`;\n      break;\n    case 'galar':\n    case 'galarian':\n      pokemon = `${pokemon.substring(pokemon.split(' ')[0].length + 1)}-galar`;\n      break;\n    case 'paldea':\n    case 'paldean':\n      pokemon = `${pokemon.substring(pokemon.split(' ')[0].length + 1)}-paldea`;\n      break;\n    default:\n      break;\n  }\n\n  if (pokemon.startsWith('mega')) {\n    pokemon = `${pokemon.substring(4, pokemon.length)}mega`;\n  }\n\n  if (pokemon.startsWith('gigantamax')) {\n    pokemon = `${pokemon.substring(10, pokemon.length)}gmax`;\n  } else if (pokemon.startsWith('gmax')) {\n    pokemon = `${pokemon.substring(4, pokemon.length)}gmax`;\n  }\n\n  if (pokemon.startsWith('alolan')) {\n    pokemon = `${pokemon.substring(6, pokemon.length)}alola`;\n  } else if (pokemon.startsWith('alola')) {\n    pokemon = `${pokemon.substring(5, pokemon.length)}alola`;\n  }\n\n  if (pokemon.startsWith('galarian')) {\n    pokemon = `${pokemon.substring(8, pokemon.length)}galar`;\n  } else if (pokemon.startsWith('galar')) {\n    pokemon = `${pokemon.substring(5, pokemon.length)}galar`;\n  }\n\n  if (pokemon.startsWith('paldean')) {\n    pokemon = `${pokemon.substring(7, pokemon.length)}paldea`;\n  } else if (pokemon.startsWith('paldea')) {\n    pokemon = `${pokemon.substring(6, pokemon.length)}paldea`;\n  }\n\n  return pokemon;\n}\n"],"mappings":"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","names":[]}