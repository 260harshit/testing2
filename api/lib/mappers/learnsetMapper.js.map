{"version":3,"sources":["../../../src/lib/mappers/learnsetMapper.ts"],"sourcesContent":["import { learnsets } from '#assets/learnsets';\nimport { moves } from '#assets/moves';\nimport { pokedex } from '#assets/pokedex';\nimport type { PokemonTypes } from '#assets/pokemon-source';\nimport { mapMoveDataToMoveGraphQL } from '#mappers/moveMapper';\nimport type { Learnset, LearnsetLevelUpMove, LearnsetMove, Move, PokemonLearnset } from '#types';\nimport { addPropertyToObjectFieldBased } from '#utils/addPropertyToObject';\nimport type { GraphQLSet } from '#utils/GraphQLSet';\nimport { parseSpeciesForSprite } from '#utils/spriteParser';\nimport { toLowerSingleWordCase } from '#utils/util';\nimport type { Generation, NonNullish } from '#utils/utilTypes';\nimport type { GetLearnsetArgs } from '#validations/getLearnsetArgs';\nimport { cast, isNullish } from '@sapphire/utilities';\n\nexport function mapPokemonAndMovesToLearnsetGraphQL({ args, requestedFields }: MapPokemonAndMovesToLearnsetGraphQLParams): Learnset | null {\n  const learnsetFromDataset = getLearnsetDataset(args.pokemon);\n\n  if (isNullish(learnsetFromDataset)) {\n    return null;\n  }\n\n  const learnset: Learnset = {} as Learnset;\n\n  if (learnsetFromDataset.eventOnly === undefined) {\n    const levelupMoves: LearnsetLevelUpMove[] = [];\n    const virtualTransferMoves: LearnsetMove[] = [];\n    const tutorMoves: LearnsetMove[] = [];\n    const tmMoves: LearnsetMove[] = [];\n    const eggMoves: LearnsetMove[] = [];\n    const eventMoves: LearnsetMove[] = [];\n    const dreamworldMoves: LearnsetMove[] = [];\n\n    for (const move of args.moves) {\n      if (Reflect.has(learnsetFromDataset, move)) {\n        const methods = learnsetFromDataset[move];\n\n        const {\n          virtualTransferMoves: generationalVirtualTransferMoves,\n          tutorMoves: generationalTutorMoves,\n          tmMoves: generationalTmMoves,\n          eggMoves: generationalEggMoves,\n          eventMoves: generationalEventMoves,\n          dreamworldMoves: generationalDreamworldMoves,\n          levelupMoves: generationalLevelupMoves\n        } = mapMoveAndMethodsToLearnsets({ move, methods, generation: args.generation as Generation, requestedFields });\n\n        levelupMoves.push(...generationalLevelupMoves);\n        virtualTransferMoves.push(...generationalVirtualTransferMoves);\n        tutorMoves.push(...generationalTutorMoves);\n        tmMoves.push(...generationalTmMoves);\n        eggMoves.push(...generationalEggMoves);\n        eventMoves.push(...generationalEventMoves);\n        dreamworldMoves.push(...generationalDreamworldMoves);\n      }\n    }\n\n    addLearnsetPropertiesToGraphQLObject({\n      objectTarget: learnset,\n      data: {\n        virtualTransferMoves,\n        tutorMoves,\n        tmMoves,\n        eggMoves,\n        eventMoves,\n        dreamworldMoves,\n        levelupMoves\n      },\n      requestedFields: cast<GraphQLSet<keyof PokemonLearnset>>(requestedFields)\n    });\n  }\n\n  if (shouldIncludePokemonDetails(requestedFields)) {\n    const pokemonEntry = pokedex.get(args.pokemon)!;\n\n    addPropertyToObjectFieldBased({\n      objectTarget: learnset,\n      propertyKey: 'sprite',\n      propertyValue: parseSpeciesForSprite({\n        pokemonName: pokemonEntry.species,\n        pokemonNumber: pokemonEntry.num,\n        baseSpecies: pokemonEntry.baseSpecies,\n        specialSprite: pokemonEntry.specialSprite,\n        specialShinySprite: pokemonEntry.specialShinySprite,\n        specialBackSprite: pokemonEntry.specialBackSprite,\n        specialShinyBackSprite: pokemonEntry.specialShinyBackSprite\n      }),\n      requestedFields\n    });\n    addPropertyToObjectFieldBased({\n      objectTarget: learnset,\n      propertyKey: 'shinySprite',\n      propertyValue: parseSpeciesForSprite({\n        pokemonName: pokemonEntry.species,\n        pokemonNumber: pokemonEntry.num,\n        baseSpecies: pokemonEntry.baseSpecies,\n        specialSprite: pokemonEntry.specialSprite,\n        specialShinySprite: pokemonEntry.specialShinySprite,\n        specialBackSprite: pokemonEntry.specialBackSprite,\n        specialShinyBackSprite: pokemonEntry.specialShinyBackSprite,\n        shiny: true\n      }),\n      requestedFields\n    });\n    addPropertyToObjectFieldBased({\n      objectTarget: learnset,\n      propertyKey: 'backSprite',\n      propertyValue: parseSpeciesForSprite({\n        pokemonName: pokemonEntry.species,\n        pokemonNumber: pokemonEntry.num,\n        baseSpecies: pokemonEntry.baseSpecies,\n        specialSprite: pokemonEntry.specialSprite,\n        specialShinySprite: pokemonEntry.specialShinySprite,\n        specialBackSprite: pokemonEntry.specialBackSprite,\n        specialShinyBackSprite: pokemonEntry.specialShinyBackSprite,\n        backSprite: true\n      }),\n      requestedFields\n    });\n    addPropertyToObjectFieldBased({\n      objectTarget: learnset,\n      propertyKey: 'shinyBackSprite',\n      propertyValue: parseSpeciesForSprite({\n        pokemonName: pokemonEntry.species,\n        pokemonNumber: pokemonEntry.num,\n        baseSpecies: pokemonEntry.baseSpecies,\n        specialSprite: pokemonEntry.specialSprite,\n        specialShinySprite: pokemonEntry.specialShinySprite,\n        specialBackSprite: pokemonEntry.specialBackSprite,\n        specialShinyBackSprite: pokemonEntry.specialShinyBackSprite,\n        shiny: true,\n        backSprite: true\n      }),\n      requestedFields\n    });\n\n    addPropertyToObjectFieldBased({\n      objectTarget: learnset,\n      propertyKey: 'num',\n      propertyValue: pokemonEntry.num,\n      requestedFields\n    });\n    addPropertyToObjectFieldBased({\n      objectTarget: learnset,\n      propertyKey: 'pokemonKey',\n      propertyValue: pokemonEntry.key!,\n      requestedFields\n    });\n    addPropertyToObjectFieldBased({\n      objectTarget: learnset,\n      propertyKey: 'color',\n      propertyValue: pokemonEntry.color,\n      requestedFields\n    });\n    addPropertyToObjectFieldBased({\n      objectTarget: learnset,\n      propertyKey: 'species',\n      propertyValue: pokemonEntry.species,\n      requestedFields\n    });\n  }\n\n  return learnset;\n}\n\nexport function getLearnsetDataset(pokemon: string): Record<string, string[]> | null {\n  let learnsetFromDataset = learnsets.get(pokemon);\n\n  let pokemonFromDataset: PokemonTypes.DexEntry | undefined = undefined;\n\n  // If the learnset is event only then overwrite it back to undefined to allow for further parsing\n  if (learnsetFromDataset?.eventOnly?.[0] === 'See base forme of this Pok√©mon') {\n    learnsetFromDataset = undefined;\n  }\n\n  // Attempt to get the learnset from the base species\n  if (!learnsetFromDataset) {\n    pokemonFromDataset = pokedex.get(toLowerSingleWordCase(pokemon));\n    learnsetFromDataset = learnsets.get(toLowerSingleWordCase(pokemonFromDataset?.baseSpecies ?? ''));\n  }\n\n  // If there is still no learnset then try to get it from other formes\n  if (!learnsetFromDataset) {\n    // First ensure the pokemon is retrieved from the dataset\n    if (!pokemonFromDataset) {\n      pokemonFromDataset = pokedex.get(toLowerSingleWordCase(pokemon));\n    }\n\n    for (const otherForm of pokemonFromDataset?.otherFormes ?? []) {\n      learnsetFromDataset = learnsets.get(toLowerSingleWordCase(otherForm));\n      if (learnsetFromDataset) {\n        break;\n      }\n    }\n  }\n\n  return learnsetFromDataset ?? null;\n}\n\nexport function mapPokemonToPokemonLearnsetGraphQL({\n  learnsetFromDataset,\n  generation,\n  requestedFields\n}: MapPokemonToPokemonLearnsetGraphQLParams): PokemonLearnset {\n  const pokemonLearnset: PokemonLearnset = {} as PokemonLearnset;\n\n  if (learnsetFromDataset.eventOnly === undefined) {\n    const levelupMoves: LearnsetLevelUpMove[] = [];\n    const virtualTransferMoves: LearnsetMove[] = [];\n    const tutorMoves: LearnsetMove[] = [];\n    const tmMoves: LearnsetMove[] = [];\n    const eggMoves: LearnsetMove[] = [];\n    const eventMoves: LearnsetMove[] = [];\n    const dreamworldMoves: LearnsetMove[] = [];\n\n    for (const [move, methods] of Object.entries(learnsetFromDataset)) {\n      const {\n        virtualTransferMoves: generationalVirtualTransferMoves,\n        tutorMoves: generationalTutorMoves,\n        tmMoves: generationalTmMoves,\n        eggMoves: generationalEggMoves,\n        eventMoves: generationalEventMoves,\n        dreamworldMoves: generationalDreamworldMoves,\n        levelupMoves: generationalLevelupMoves\n      } = mapMoveAndMethodsToLearnsets({ move, methods, generation, requestedFields });\n\n      levelupMoves.push(...generationalLevelupMoves);\n      virtualTransferMoves.push(...generationalVirtualTransferMoves);\n      tutorMoves.push(...generationalTutorMoves);\n      tmMoves.push(...generationalTmMoves);\n      eggMoves.push(...generationalEggMoves);\n      eventMoves.push(...generationalEventMoves);\n      dreamworldMoves.push(...generationalDreamworldMoves);\n    }\n\n    addLearnsetPropertiesToGraphQLObject({\n      objectTarget: pokemonLearnset,\n      data: {\n        levelupMoves,\n        virtualTransferMoves,\n        tutorMoves,\n        tmMoves,\n        eggMoves,\n        eventMoves,\n        dreamworldMoves\n      },\n      requestedFields\n    });\n  }\n\n  return pokemonLearnset;\n}\n\nfunction mapMoveAndMethodsToLearnsets({ move, methods, generation, requestedFields }: MapMoveAndMethodsToLearnsetsParams) {\n  const levelupMoves: LearnsetLevelUpMove[] = [];\n  const virtualTransferMoves: LearnsetMove[] = [];\n  const tutorMoves: LearnsetMove[] = [];\n  const tmMoves: LearnsetMove[] = [];\n  const eggMoves: LearnsetMove[] = [];\n  const eventMoves: LearnsetMove[] = [];\n  const dreamworldMoves: LearnsetMove[] = [];\n\n  for (const method of methods) {\n    if (generation && getMethodGeneration(method) !== generation) continue;\n\n    switch (getMethodType(method)) {\n      case 'L':\n        if (requestedFields.has('levelUpMoves')) {\n          levelupMoves.push(\n            createLevelupMove({\n              move,\n              level: getMethodLevel(method),\n              generation: getMethodGeneration(method),\n              requestedFields\n            })\n          );\n        }\n        break;\n      case 'V':\n        if (requestedFields.has('virtualTransferMoves')) {\n          virtualTransferMoves.push(\n            createLearnsetMove({\n              move,\n              generation: getMethodGeneration(method),\n              requestedFields,\n              requestedFieldsPrefix: 'virtualTransferMoves.move.'\n            })\n          );\n        }\n        break;\n      case 'T':\n        if (requestedFields.has('tutorMoves')) {\n          tutorMoves.push(\n            createLearnsetMove({\n              move,\n              generation: getMethodGeneration(method),\n              requestedFields,\n              requestedFieldsPrefix: 'tutorMoves.move.'\n            })\n          );\n        }\n        break;\n      case 'M':\n        if (requestedFields.has('tmMoves')) {\n          tmMoves.push(\n            createLearnsetMove({\n              move,\n              generation: getMethodGeneration(method),\n              requestedFields,\n              requestedFieldsPrefix: 'tmMoves.move.'\n            })\n          );\n        }\n        break;\n      case 'E':\n        if (requestedFields.has('eggMoves')) {\n          eggMoves.push(\n            createLearnsetMove({\n              move,\n              generation: getMethodGeneration(method),\n              requestedFields,\n              requestedFieldsPrefix: 'eggMoves.move.'\n            })\n          );\n        }\n        break;\n      case 'S':\n        if (requestedFields.has('eventMoves')) {\n          eventMoves.push(\n            createLearnsetMove({\n              move,\n              generation: getMethodGeneration(method),\n              requestedFields,\n              requestedFieldsPrefix: 'eventMoves.move.'\n            })\n          );\n        }\n        break;\n      case 'D':\n        if (requestedFields.has('dreamworldMoves')) {\n          dreamworldMoves.push(\n            createLearnsetMove({\n              move,\n              generation: getMethodGeneration(method),\n              requestedFields,\n              requestedFieldsPrefix: 'eggMoves.move.'\n            })\n          );\n        }\n        break;\n    }\n  }\n\n  return {\n    levelupMoves,\n    virtualTransferMoves,\n    tutorMoves,\n    tmMoves,\n    eggMoves,\n    eventMoves,\n    dreamworldMoves\n  };\n}\n\nfunction addLearnsetPropertiesToGraphQLObject({ objectTarget, data, requestedFields }: AddLearnsetPropertiesToGraphQLObjectParams) {\n  addPropertyToObjectFieldBased({\n    objectTarget,\n    propertyKey: 'levelUpMoves',\n    propertyValue: data.levelupMoves,\n    requestedFields\n  });\n\n  addPropertyToObjectFieldBased({\n    objectTarget,\n    propertyKey: 'virtualTransferMoves',\n    propertyValue: data.virtualTransferMoves,\n    requestedFields\n  });\n\n  addPropertyToObjectFieldBased({\n    objectTarget,\n    propertyKey: 'tutorMoves',\n    propertyValue: data.tutorMoves,\n    requestedFields\n  });\n\n  addPropertyToObjectFieldBased({\n    objectTarget,\n    propertyKey: 'tmMoves',\n    propertyValue: data.tmMoves,\n    requestedFields\n  });\n\n  addPropertyToObjectFieldBased({\n    objectTarget,\n    propertyKey: 'eggMoves',\n    propertyValue: data.eggMoves,\n    requestedFields\n  });\n\n  addPropertyToObjectFieldBased({\n    objectTarget,\n    propertyKey: 'eventMoves',\n    propertyValue: data.eventMoves,\n    requestedFields\n  });\n\n  addPropertyToObjectFieldBased({\n    objectTarget,\n    propertyKey: 'dreamworldMoves',\n    propertyValue: data.dreamworldMoves,\n    requestedFields\n  });\n}\n\nfunction createLearnsetMove({ move, generation, requestedFields, requestedFieldsPrefix }: CreateLearnsetMoveParameters): LearnsetMove {\n  const moveData = moves.get(move)!;\n\n  const requestedMoveFields = requestedFields.filterStartsWith<keyof Move>(requestedFieldsPrefix, true);\n\n  return {\n    move: mapMoveDataToMoveGraphQL({ data: moveData, requestedFields: requestedMoveFields }),\n    generation\n  };\n}\n\nfunction createLevelupMove({ level, ...params }: CreateLevelupMoveParameters): LearnsetLevelUpMove {\n  return {\n    ...createLearnsetMove({ ...params, requestedFieldsPrefix: 'levelUpMoves.move.' }),\n    level\n  };\n}\n\nfunction getMethodGeneration(method: string): Generation {\n  return parseInt(method.slice(0, 1), 10) as Generation;\n}\n\nfunction getMethodLevel(method: string): number {\n  return parseInt(method.slice(2), 10);\n}\n\nfunction getMethodType(method: string): MethodTypes {\n  return method.slice(1, 2) as MethodTypes;\n}\n\nfunction shouldIncludePokemonDetails(requestedFields: GraphQLSet<keyof Learnset>): boolean {\n  return (\n    requestedFields.has('sprite') ||\n    requestedFields.has('backSprite') ||\n    requestedFields.has('shinySprite') ||\n    requestedFields.has('shinyBackSprite') ||\n    requestedFields.has('num') ||\n    requestedFields.has('color') ||\n    requestedFields.has('species')\n  );\n}\n\ntype MethodTypes = 'L' | 'V' | 'T' | 'M' | 'E' | 'S' | 'D';\n\ninterface MapPokemonAndMovesToLearnsetGraphQLParams {\n  args: NonNullish<GetLearnsetArgs>;\n  requestedFields: GraphQLSet<keyof Learnset>;\n}\n\ninterface MapPokemonToPokemonLearnsetGraphQLParams {\n  learnsetFromDataset: Record<string, string[]>;\n  generation: Generation;\n  requestedFields: GraphQLSet<keyof PokemonLearnset>;\n}\n\ninterface MapMoveAndMethodsToLearnsetsParams {\n  move: string;\n  methods: string[];\n  generation: Generation;\n  requestedFields: GraphQLSet<keyof PokemonLearnset | keyof Learnset>;\n}\n\ninterface AddLearnsetPropertiesToGraphQLObjectParams {\n  objectTarget: PokemonLearnset | Learnset;\n  data: ReturnType<typeof mapMoveAndMethodsToLearnsets>;\n  requestedFields: GraphQLSet<keyof PokemonLearnset>;\n}\n\ninterface CreateLearnsetMoveParameters extends Pick<MapPokemonAndMovesToLearnsetGraphQLParams, 'requestedFields'> {\n  move: string;\n  generation: Generation;\n  requestedFieldsPrefix: `${\n    | 'levelUpMoves'\n    | 'dreamworldMoves'\n    | 'eggMoves'\n    | 'eventMoves'\n    | 'tmMoves'\n    | 'tutorMoves'\n    | 'virtualTransferMoves'}.move.`;\n}\n\ninterface CreateLevelupMoveParameters extends Omit<CreateLearnsetMoveParameters, 'requestedFieldsPrefix'> {\n  level: number;\n}\n"],"mappings":"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","names":[]}