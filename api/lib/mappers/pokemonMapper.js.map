{"version":3,"sources":["../../../src/lib/mappers/pokemonMapper.ts"],"sourcesContent":["import { abilities } from '#assets/abilities';\nimport { pokedex } from '#assets/pokedex';\nimport type { PokemonTypes } from '#assets/pokemon-source';\nimport flavors from '#jsonAssets/flavorText.json' assert { type: 'json' };\nimport tiers from '#jsonAssets/formats.json' assert { type: 'json' };\nimport { AbilityReferencedCallIdentifier, mapAbilityDataToAbilityGraphQL } from '#mappers/abilityMapper';\nimport { getLearnsetDataset, mapPokemonToPokemonLearnsetGraphQL } from '#mappers/learnsetMapper';\nimport { mapTypesToTypeMatchupGraphQL } from '#mappers/typeMatchupMapper';\nimport type {\n  Abilities,\n  Ability,\n  CatchRate,\n  EvYields,\n  Flavor,\n  Gender,\n  GenerationalPokemonLearnset,\n  Pokemon,\n  PokemonLearnset,\n  PokemonType,\n  Stats,\n  TypeMatchup\n} from '#types';\nimport { addPropertyToObjectConditional, addPropertyToObjectFieldBased } from '#utils/addPropertyToObject';\nimport type { GraphQLSet } from '#utils/GraphQLSet';\nimport { speciesThatAreNotInGeneration8Nor9 } from '#utils/pastGenerationPokemon';\nimport type { TypesEnum } from '#utils/pokemonTypes';\nimport { parseSpeciesForSprite } from '#utils/spriteParser';\nimport { toLowerHyphenCase, toLowerSingleWordCase } from '#utils/util';\nimport type { Generation, UnwrapArray } from '#utils/utilTypes';\nimport { cast, toTitleCase } from '@sapphire/utilities';\n\nconst bulbapediaBaseUrlPrefix = 'https://bulbapedia.bulbagarden.net/wiki/';\nconst bulbapediaBaseUrlPostfix = '_(Pok√©mon)';\nconst serebiiBaseUrl = 'https://www.serebii.net/pokedex';\nconst smogonBaseUrl = 'https://www.smogon.com/dex';\n\nexport function mapPokemonDataToPokemonGraphQL({\n  data,\n  requestedFields,\n  offsetFlavorTexts = 0,\n  reverseFlavorTexts = true,\n  takeFlavorTexts = 1,\n  parsingPokemon = '',\n  recursingAs = false\n}: MapPokemonDataToPokemonGraphQLParameters) {\n  const resolvedRecursingAs = recursingAs ? (`${recursingAs}.` as const) : ('' as const);\n\n  const genderEntryRequestedFields = cast<GraphQLSet<keyof Gender>>(requestedFields);\n  const genderObject: Gender = {} as Gender;\n  const basePokemonGenderRatio: PokemonTypes.DexEntry['genderRatio'] = data.genderRatio || {\n    male: '50%',\n    female: '50%'\n  };\n  addPropertyToObjectFieldBased({\n    objectTarget: genderObject,\n    propertyKey: 'male',\n    propertyValue: basePokemonGenderRatio.male,\n    requestedFields: genderEntryRequestedFields,\n    fieldAccessor: `${resolvedRecursingAs}gender.male`\n  });\n  addPropertyToObjectFieldBased({\n    objectTarget: genderObject,\n    propertyKey: 'female',\n    propertyValue: basePokemonGenderRatio.female,\n    requestedFields: genderEntryRequestedFields,\n    fieldAccessor: `${resolvedRecursingAs}gender.female`\n  });\n\n  const baseStatsRequestedFields = cast<GraphQLSet<keyof Stats>>(requestedFields);\n  const baseStatsObject: Stats = {} as Stats;\n  addPropertyToObjectFieldBased({\n    objectTarget: baseStatsObject,\n    propertyKey: 'hp',\n    propertyValue: data.baseStats.hp,\n    requestedFields: baseStatsRequestedFields,\n    fieldAccessor: `${resolvedRecursingAs}baseStats.hp`\n  });\n  addPropertyToObjectFieldBased({\n    objectTarget: baseStatsObject,\n    propertyKey: 'attack',\n    propertyValue: data.baseStats.atk,\n    requestedFields: baseStatsRequestedFields,\n    fieldAccessor: `${resolvedRecursingAs}baseStats.attack`\n  });\n  addPropertyToObjectFieldBased({\n    objectTarget: baseStatsObject,\n    propertyKey: 'defense',\n    propertyValue: data.baseStats.def,\n    requestedFields: baseStatsRequestedFields,\n    fieldAccessor: `${resolvedRecursingAs}baseStats.defense`\n  });\n  addPropertyToObjectFieldBased({\n    objectTarget: baseStatsObject,\n    propertyKey: 'specialattack',\n    propertyValue: data.baseStats.spa,\n    requestedFields: baseStatsRequestedFields,\n    fieldAccessor: `${resolvedRecursingAs}baseStats.specialattack`\n  });\n  addPropertyToObjectFieldBased({\n    objectTarget: baseStatsObject,\n    propertyKey: 'specialdefense',\n    propertyValue: data.baseStats.spd,\n    requestedFields: baseStatsRequestedFields,\n    fieldAccessor: `${resolvedRecursingAs}baseStats.specialdefense`\n  });\n  addPropertyToObjectFieldBased({\n    objectTarget: baseStatsObject,\n    propertyKey: 'speed',\n    propertyValue: data.baseStats.spe,\n    requestedFields: baseStatsRequestedFields,\n    fieldAccessor: `${resolvedRecursingAs}baseStats.speed`\n  });\n\n  const evYieldsRequestedFields = cast<GraphQLSet<keyof EvYields>>(requestedFields);\n  const evYieldsObject: EvYields = {} as EvYields;\n  addPropertyToObjectFieldBased({\n    objectTarget: evYieldsObject,\n    propertyKey: 'hp',\n    propertyValue: data.evYields.hp,\n    requestedFields: evYieldsRequestedFields,\n    fieldAccessor: `${resolvedRecursingAs}evYields.hp`\n  });\n  addPropertyToObjectFieldBased({\n    objectTarget: evYieldsObject,\n    propertyKey: 'attack',\n    propertyValue: data.evYields.atk,\n    requestedFields: evYieldsRequestedFields,\n    fieldAccessor: `${resolvedRecursingAs}evYields.attack`\n  });\n  addPropertyToObjectFieldBased({\n    objectTarget: evYieldsObject,\n    propertyKey: 'defense',\n    propertyValue: data.evYields.def,\n    requestedFields: evYieldsRequestedFields,\n    fieldAccessor: `${resolvedRecursingAs}evYields.defense`\n  });\n  addPropertyToObjectFieldBased({\n    objectTarget: evYieldsObject,\n    propertyKey: 'specialattack',\n    propertyValue: data.evYields.spa,\n    requestedFields: evYieldsRequestedFields,\n    fieldAccessor: `${resolvedRecursingAs}evYields.specialattack`\n  });\n  addPropertyToObjectFieldBased({\n    objectTarget: evYieldsObject,\n    propertyKey: 'specialdefense',\n    propertyValue: data.evYields.spd,\n    requestedFields: evYieldsRequestedFields,\n    fieldAccessor: `${resolvedRecursingAs}evYields.specialdefense`\n  });\n  addPropertyToObjectFieldBased({\n    objectTarget: evYieldsObject,\n    propertyKey: 'speed',\n    propertyValue: data.evYields.spe,\n    requestedFields: evYieldsRequestedFields,\n    fieldAccessor: `${resolvedRecursingAs}evYields.speed`\n  });\n\n  const abilitiesObject: Abilities = {} as Abilities;\n\n  const abilitiesRequestedFields = requestedFields.filterStartsWith<keyof Abilities>(`${resolvedRecursingAs}abilities.`);\n  addPropertyToObjectFieldBased({\n    objectTarget: abilitiesObject,\n    propertyKey: 'first',\n    propertyValue: () =>\n      resolvedNestedAbility(\n        data.abilities.first,\n        abilitiesRequestedFields.filterStartsWith<keyof Ability>(`${resolvedRecursingAs}abilities.first.`, true)\n      ),\n    requestedFields: abilitiesRequestedFields,\n    fieldAccessor: `${resolvedRecursingAs}abilities.first`\n  });\n  addPropertyToObjectFieldBased({\n    objectTarget: abilitiesObject,\n    propertyKey: 'second',\n    propertyValue: () =>\n      resolvedNestedAbility(\n        data.abilities.second,\n        abilitiesRequestedFields.filterStartsWith<keyof Ability>(`${resolvedRecursingAs}abilities.second.`, true)\n      ),\n    requestedFields: abilitiesRequestedFields,\n    fieldAccessor: `${resolvedRecursingAs}abilities.second`\n  });\n  addPropertyToObjectFieldBased({\n    objectTarget: abilitiesObject,\n    propertyKey: 'hidden',\n    propertyValue: () =>\n      resolvedNestedAbility(\n        data.abilities.hidden,\n        abilitiesRequestedFields.filterStartsWith<keyof Ability>(`${resolvedRecursingAs}abilities.hidden.`, true)\n      ),\n    requestedFields: abilitiesRequestedFields,\n    fieldAccessor: `${resolvedRecursingAs}abilities.hidden`\n  });\n  addPropertyToObjectFieldBased({\n    objectTarget: abilitiesObject,\n    propertyKey: 'special',\n    propertyValue: () =>\n      resolvedNestedAbility(\n        data.abilities.special,\n        abilitiesRequestedFields.filterStartsWith<keyof Ability>(`${resolvedRecursingAs}abilities.special.`, true)\n      ),\n    requestedFields: abilitiesRequestedFields,\n    fieldAccessor: `${resolvedRecursingAs}abilities.special`\n  });\n\n  const pokemonTypesArray: PokemonType[] = [];\n  const pokemonTypeRequestedFields = requestedFields.filterStartsWith<keyof PokemonType>(`${resolvedRecursingAs}types.`);\n\n  for (const type of data.types) {\n    const pokemonTypeObject: PokemonType = {} as PokemonType;\n\n    addPropertyToObjectFieldBased({\n      objectTarget: pokemonTypeObject,\n      propertyKey: 'name',\n      propertyValue: toTitleCase(type),\n      requestedFields: pokemonTypeRequestedFields,\n      fieldAccessor: `${resolvedRecursingAs}types.name`\n    });\n\n    addPropertyToObjectConditional({\n      objectTarget: pokemonTypeObject,\n      propertyKey: 'matchup',\n      propertyValue: () =>\n        resolveNestedType(type, pokemonTypeRequestedFields.filterStartsWith<keyof TypeMatchup>(`${resolvedRecursingAs}types.matchup.`, true)),\n      condition: pokemonTypeRequestedFields.hasStartsWith(`${resolvedRecursingAs}types.matchup.`)\n    });\n\n    if (Object.values(pokemonTypeObject).length) {\n      pokemonTypesArray.push(pokemonTypeObject);\n    }\n  }\n\n  const generationalLearnsetsObject: GenerationalPokemonLearnset = {} as GenerationalPokemonLearnset;\n  const generationalLearnsetsRequestedFields = requestedFields.filterStartsWith<keyof GenerationalPokemonLearnset>(\n    `${resolvedRecursingAs}learnsets.`\n  );\n\n  addPropertyToObjectConditional({\n    objectTarget: generationalLearnsetsObject,\n    propertyKey: 'generation3',\n    propertyValue: () =>\n      resolvedNestedLearnset(\n        parsingPokemon || toLowerSingleWordCase(data.species),\n        3,\n        generationalLearnsetsRequestedFields.filterStartsWith<keyof PokemonLearnset>(`${resolvedRecursingAs}learnsets.generation3.`, true)\n      ),\n    condition: generationalLearnsetsRequestedFields.hasStartsWith(`${resolvedRecursingAs}learnsets.generation3.`)\n  });\n\n  addPropertyToObjectConditional({\n    objectTarget: generationalLearnsetsObject,\n    propertyKey: 'generation4',\n    propertyValue: () =>\n      resolvedNestedLearnset(\n        parsingPokemon || toLowerSingleWordCase(data.species),\n        4,\n        generationalLearnsetsRequestedFields.filterStartsWith<keyof PokemonLearnset>(`${resolvedRecursingAs}learnsets.generation4.`, true)\n      ),\n    condition: generationalLearnsetsRequestedFields.hasStartsWith(`${resolvedRecursingAs}learnsets.generation4.`)\n  });\n\n  addPropertyToObjectConditional({\n    objectTarget: generationalLearnsetsObject,\n    propertyKey: 'generation5',\n    propertyValue: () =>\n      resolvedNestedLearnset(\n        parsingPokemon || toLowerSingleWordCase(data.species),\n        5,\n        generationalLearnsetsRequestedFields.filterStartsWith<keyof PokemonLearnset>(`${resolvedRecursingAs}learnsets.generation5.`, true)\n      ),\n    condition: generationalLearnsetsRequestedFields.hasStartsWith(`${resolvedRecursingAs}learnsets.generation5.`)\n  });\n\n  addPropertyToObjectConditional({\n    objectTarget: generationalLearnsetsObject,\n    propertyKey: 'generation6',\n    propertyValue: () =>\n      resolvedNestedLearnset(\n        parsingPokemon || toLowerSingleWordCase(data.species),\n        6,\n        generationalLearnsetsRequestedFields.filterStartsWith<keyof PokemonLearnset>(`${resolvedRecursingAs}learnsets.generation6.`, true)\n      ),\n    condition: generationalLearnsetsRequestedFields.hasStartsWith(`${resolvedRecursingAs}learnsets.generation6.`)\n  });\n\n  addPropertyToObjectConditional({\n    objectTarget: generationalLearnsetsObject,\n    propertyKey: 'generation7',\n    propertyValue: () =>\n      resolvedNestedLearnset(\n        parsingPokemon || toLowerSingleWordCase(data.species),\n        7,\n        generationalLearnsetsRequestedFields.filterStartsWith<keyof PokemonLearnset>(`${resolvedRecursingAs}learnsets.generation7.`, true)\n      ),\n    condition: generationalLearnsetsRequestedFields.hasStartsWith(`${resolvedRecursingAs}learnsets.generation7.`)\n  });\n\n  addPropertyToObjectConditional({\n    objectTarget: generationalLearnsetsObject,\n    propertyKey: 'generation8',\n    propertyValue: () =>\n      resolvedNestedLearnset(\n        parsingPokemon || toLowerSingleWordCase(data.species),\n        9,\n        generationalLearnsetsRequestedFields.filterStartsWith<keyof PokemonLearnset>(`${resolvedRecursingAs}learnsets.generation8.`, true)\n      ),\n    condition: generationalLearnsetsRequestedFields.hasStartsWith(`${resolvedRecursingAs}learnsets.generation8.`)\n  });\n\n  const catchRateRequestedFields = cast<GraphQLSet<keyof CatchRate>>(requestedFields);\n  const catchRateObject: CatchRate = {} as CatchRate;\n  const basePokemonCatchRate: PokemonTypes.DexEntry['catchRate'] = data.catchRate || {\n    base: 0,\n    percentageWithOrdinaryPokeballAtFullHealth: '0%'\n  };\n  addPropertyToObjectFieldBased({\n    objectTarget: catchRateObject,\n    propertyKey: 'base',\n    propertyValue: basePokemonCatchRate.base,\n    requestedFields: catchRateRequestedFields,\n    fieldAccessor: `${resolvedRecursingAs}catchRate.base`\n  });\n  addPropertyToObjectFieldBased({\n    objectTarget: catchRateObject,\n    propertyKey: 'percentageWithOrdinaryPokeballAtFullHealth',\n    propertyValue: basePokemonCatchRate.percentageWithOrdinaryPokeballAtFullHealth,\n    requestedFields: catchRateRequestedFields,\n    fieldAccessor: `${resolvedRecursingAs}catchRate.percentageWithOrdinaryPokeballAtFullHealth`\n  });\n\n  const basePokemonArgs = {\n    offsetFlavorTexts,\n    takeFlavorTexts,\n    reverseFlavorTexts\n  };\n\n  const evolutionChain: Pokemon[] = [];\n  const preevolutionChain: Pokemon[] = [];\n\n  const pokemonData: Pokemon = {} as Pokemon;\n\n  addPropertyToObjectConditional({\n    objectTarget: pokemonData,\n    propertyKey: 'learnsets',\n    propertyValue: generationalLearnsetsObject,\n    condition: Boolean(Object.keys(generationalLearnsetsObject).length)\n  });\n  addPropertyToObjectConditional({\n    objectTarget: pokemonData,\n    propertyKey: 'abilities',\n    propertyValue: abilitiesObject,\n    condition: Boolean(Object.keys(abilitiesObject).length)\n  });\n  addPropertyToObjectConditional({\n    objectTarget: pokemonData,\n    propertyKey: 'types',\n    propertyValue: pokemonTypesArray,\n    condition: Boolean(pokemonTypesArray.length)\n  });\n  addPropertyToObjectFieldBased({\n    objectTarget: pokemonData,\n    propertyKey: 'gender',\n    propertyValue: genderObject,\n    requestedFields,\n    fieldAccessor: `${resolvedRecursingAs}gender`\n  });\n  addPropertyToObjectFieldBased({\n    objectTarget: pokemonData,\n    propertyKey: 'baseStats',\n    propertyValue: baseStatsObject,\n    requestedFields,\n    fieldAccessor: `${resolvedRecursingAs}baseStats`\n  });\n  addPropertyToObjectFieldBased({\n    objectTarget: pokemonData,\n    propertyKey: 'evYields',\n    propertyValue: evYieldsObject,\n    requestedFields,\n    fieldAccessor: `${resolvedRecursingAs}evYields`\n  });\n  addPropertyToObjectFieldBased({\n    objectTarget: pokemonData,\n    propertyKey: 'catchRate',\n    propertyValue: catchRateObject,\n    requestedFields,\n    fieldAccessor: `${resolvedRecursingAs}catchRate`\n  });\n\n  addPropertyToObjectFieldBased({\n    objectTarget: pokemonData,\n    propertyKey: 'key',\n    propertyValue: data.key,\n    requestedFields,\n    fieldAccessor: `${resolvedRecursingAs}key`\n  });\n  addPropertyToObjectFieldBased({\n    objectTarget: pokemonData,\n    propertyKey: 'num',\n    propertyValue: data.num,\n    requestedFields,\n    fieldAccessor: `${resolvedRecursingAs}num`\n  });\n  addPropertyToObjectFieldBased({\n    objectTarget: pokemonData,\n    propertyKey: 'species',\n    propertyValue: data.species,\n    requestedFields,\n    fieldAccessor: `${resolvedRecursingAs}species`\n  });\n  addPropertyToObjectFieldBased({\n    objectTarget: pokemonData,\n    propertyKey: 'color',\n    propertyValue: data.color,\n    requestedFields,\n    fieldAccessor: `${resolvedRecursingAs}color`\n  });\n  addPropertyToObjectFieldBased({\n    objectTarget: pokemonData,\n    propertyKey: 'eggGroups',\n    propertyValue: data.eggGroups,\n    requestedFields,\n    fieldAccessor: `${resolvedRecursingAs}eggGroups`\n  });\n  addPropertyToObjectFieldBased({\n    objectTarget: pokemonData,\n    propertyKey: 'evolutionLevel',\n    propertyValue: data.evoLevel,\n    requestedFields,\n    fieldAccessor: `${resolvedRecursingAs}evolutionLevel`\n  });\n\n  const smogonTier = tiers[toLowerSingleWordCase(data.species)] || 'Undiscovered';\n  addPropertyToObjectFieldBased({\n    objectTarget: pokemonData,\n    propertyKey: 'smogonTier',\n    propertyValue: smogonTier,\n    requestedFields,\n    fieldAccessor: `${resolvedRecursingAs}smogonTier`\n  });\n\n  addPropertyToObjectFieldBased({\n    objectTarget: pokemonData,\n    propertyKey: 'height',\n    propertyValue: data.heightm,\n    requestedFields,\n    fieldAccessor: `${resolvedRecursingAs}height`\n  });\n  addPropertyToObjectFieldBased({\n    objectTarget: pokemonData,\n    propertyKey: 'weight',\n    propertyValue: data.weightkg,\n    requestedFields,\n    fieldAccessor: `${resolvedRecursingAs}weight`\n  });\n  addPropertyToObjectFieldBased({\n    objectTarget: pokemonData,\n    propertyKey: 'forme',\n    propertyValue: data.forme,\n    requestedFields,\n    fieldAccessor: `${resolvedRecursingAs}forme`\n  });\n  addPropertyToObjectFieldBased({\n    objectTarget: pokemonData,\n    propertyKey: 'formeLetter',\n    propertyValue: data.formeLetter,\n    requestedFields,\n    fieldAccessor: `${resolvedRecursingAs}formeLetter`\n  });\n  addPropertyToObjectFieldBased({\n    objectTarget: pokemonData,\n    propertyKey: 'baseForme',\n    propertyValue: data.baseForme,\n    requestedFields,\n    fieldAccessor: `${resolvedRecursingAs}baseForme`\n  });\n  addPropertyToObjectFieldBased({\n    objectTarget: pokemonData,\n    propertyKey: 'baseSpecies',\n    propertyValue: data.baseSpecies,\n    requestedFields,\n    fieldAccessor: `${resolvedRecursingAs}baseSpecies`\n  });\n  addPropertyToObjectFieldBased({\n    objectTarget: pokemonData,\n    propertyKey: 'otherFormes',\n    propertyValue: data.otherFormes,\n    requestedFields,\n    fieldAccessor: `${resolvedRecursingAs}otherFormes`\n  });\n  addPropertyToObjectFieldBased({\n    objectTarget: pokemonData,\n    propertyKey: 'cosmeticFormes',\n    propertyValue: data.cosmeticFormes,\n    requestedFields,\n    fieldAccessor: `${resolvedRecursingAs}cosmeticFormes`\n  });\n  addPropertyToObjectFieldBased({\n    objectTarget: pokemonData,\n    propertyKey: 'baseStatsTotal',\n    propertyValue: parseBaseStatsTotal(data.baseStats),\n    requestedFields,\n    fieldAccessor: `${resolvedRecursingAs}baseStatsTotal`\n  });\n  addPropertyToObjectFieldBased({\n    objectTarget: pokemonData,\n    propertyKey: 'levellingRate',\n    propertyValue: data.levellingRate,\n    requestedFields,\n    fieldAccessor: `${resolvedRecursingAs}levellingRate`\n  });\n  addPropertyToObjectFieldBased({\n    objectTarget: pokemonData,\n    propertyKey: 'minimumHatchTime',\n    propertyValue: data.minimumHatchTime,\n    requestedFields,\n    fieldAccessor: `${resolvedRecursingAs}minimumHatchTime`\n  });\n  addPropertyToObjectFieldBased({\n    objectTarget: pokemonData,\n    propertyKey: 'maximumHatchTime',\n    propertyValue: parseMinimumHatchTimeForMaximumHatchTime(data.minimumHatchTime),\n    requestedFields,\n    fieldAccessor: `${resolvedRecursingAs}maximumHatchTime`\n  });\n  addPropertyToObjectFieldBased({\n    objectTarget: pokemonData,\n    propertyKey: 'isEggObtainable',\n    propertyValue: data.isEggObtainable,\n    requestedFields,\n    fieldAccessor: `${resolvedRecursingAs}isEggObtainable`\n  });\n\n  addPropertyToObjectFieldBased({\n    objectTarget: pokemonData,\n    propertyKey: 'serebiiPage',\n    propertyValue: parseSpeciesForSerebiiPage(data.baseSpecies ?? data.species, data.num, smogonTier),\n    requestedFields,\n    fieldAccessor: `${resolvedRecursingAs}serebiiPage`\n  });\n  addPropertyToObjectFieldBased({\n    objectTarget: pokemonData,\n    propertyKey: 'bulbapediaPage',\n    propertyValue: data.num >= 0 ? parseSpeciesForBulbapedia(data) : '',\n    requestedFields,\n    fieldAccessor: `${resolvedRecursingAs}bulbapediaPage`\n  });\n  addPropertyToObjectFieldBased({\n    objectTarget: pokemonData,\n    propertyKey: 'smogonPage',\n    propertyValue: parseSpeciesForSmogonPage(data.species, data.num, smogonTier),\n    requestedFields,\n    fieldAccessor: `${resolvedRecursingAs}smogonPage`\n  });\n  addPropertyToObjectFieldBased({\n    objectTarget: pokemonData,\n    propertyKey: 'sprite',\n    propertyValue: parseSpeciesForSprite({\n      pokemonName: data.species,\n      pokemonNumber: data.num,\n      baseSpecies: data.baseSpecies,\n      specialSprite: data.specialSprite,\n      specialShinySprite: data.specialShinySprite,\n      specialBackSprite: data.specialBackSprite,\n      specialShinyBackSprite: data.specialShinyBackSprite\n    }),\n    requestedFields,\n    fieldAccessor: `${resolvedRecursingAs}sprite`\n  });\n  addPropertyToObjectFieldBased({\n    objectTarget: pokemonData,\n    propertyKey: 'shinySprite',\n    propertyValue: parseSpeciesForSprite({\n      pokemonName: data.species,\n      pokemonNumber: data.num,\n      baseSpecies: data.baseSpecies,\n      specialSprite: data.specialSprite,\n      specialShinySprite: data.specialShinySprite,\n      specialBackSprite: data.specialBackSprite,\n      specialShinyBackSprite: data.specialShinyBackSprite,\n      shiny: true\n    }),\n    requestedFields,\n    fieldAccessor: `${resolvedRecursingAs}shinySprite`\n  });\n  addPropertyToObjectFieldBased({\n    objectTarget: pokemonData,\n    propertyKey: 'backSprite',\n    propertyValue: parseSpeciesForSprite({\n      pokemonName: data.species,\n      pokemonNumber: data.num,\n      baseSpecies: data.baseSpecies,\n      specialSprite: data.specialSprite,\n      specialShinySprite: data.specialShinySprite,\n      specialBackSprite: data.specialBackSprite,\n      specialShinyBackSprite: data.specialShinyBackSprite,\n      backSprite: true\n    }),\n    requestedFields,\n    fieldAccessor: `${resolvedRecursingAs}backSprite`\n  });\n  addPropertyToObjectFieldBased({\n    objectTarget: pokemonData,\n    propertyKey: 'shinyBackSprite',\n    propertyValue: parseSpeciesForSprite({\n      pokemonName: data.species,\n      pokemonNumber: data.num,\n      baseSpecies: data.baseSpecies,\n      specialSprite: data.specialSprite,\n      specialShinySprite: data.specialShinySprite,\n      specialBackSprite: data.specialBackSprite,\n      specialShinyBackSprite: data.specialShinyBackSprite,\n      shiny: true,\n      backSprite: true\n    }),\n    requestedFields,\n    fieldAccessor: `${resolvedRecursingAs}shinyBackSprite`\n  });\n\n  addPropertyToObjectFieldBased({\n    objectTarget: pokemonData,\n    propertyKey: 'flavorTexts',\n    propertyValue: [],\n    requestedFields,\n    fieldAccessor: `${resolvedRecursingAs}flavorTexts`\n  });\n\n  addPropertyToObjectFieldBased({\n    objectTarget: pokemonData,\n    propertyKey: 'legendary',\n    propertyValue: data.legendary ?? false,\n    requestedFields,\n    fieldAccessor: `${resolvedRecursingAs}legendary`\n  });\n\n  addPropertyToObjectFieldBased({\n    objectTarget: pokemonData,\n    propertyKey: 'mythical',\n    propertyValue: data.mythical ?? false,\n    requestedFields,\n    fieldAccessor: `${resolvedRecursingAs}mythical`\n  });\n\n  if ((requestedFields as GraphQLSet<string>).has(`${resolvedRecursingAs}flavorTexts`) && data.num >= 0) {\n    let shouldParseBaseForme = true;\n\n    if (data.forme) {\n      const formFlavors = flavors[`${data.num}${data.forme.toLowerCase()}`];\n\n      if (formFlavors) {\n        shouldParseBaseForme = false;\n\n        for (const formFlavor of formFlavors) {\n          const formFlavorEntry: Flavor = {} as Flavor;\n          formFlavorEntry.game = formFlavor.version_id;\n          formFlavorEntry.flavor = formFlavor.flavor_text;\n          pokemonData.flavorTexts.push(formFlavorEntry);\n        }\n      }\n    }\n\n    if (shouldParseBaseForme) {\n      const baseFlavors = flavors[data.num];\n\n      for (const baseFlavor of baseFlavors) {\n        const formFlavorEntry: Flavor = {} as Flavor;\n        formFlavorEntry.game = baseFlavor.version_id;\n        formFlavorEntry.flavor = baseFlavor.flavor_text;\n        pokemonData.flavorTexts.push(formFlavorEntry);\n      }\n    }\n\n    if (reverseFlavorTexts) {\n      pokemonData.flavorTexts.reverse();\n    }\n\n    pokemonData.flavorTexts = pokemonData.flavorTexts.slice(offsetFlavorTexts, offsetFlavorTexts + takeFlavorTexts);\n  }\n\n  if ((requestedFields as GraphQLSet<string>).has(`${resolvedRecursingAs}preevolutions`) && data.prevo && data.prevo !== parsingPokemon) {\n    const prevoPokemon = pokedex.get(data.prevo);\n    if (prevoPokemon) {\n      preevolutionChain.push(\n        mapPokemonDataToPokemonGraphQL({\n          data: pokedex.get(toLowerSingleWordCase(prevoPokemon.species))!,\n          requestedFields,\n          ...basePokemonArgs,\n          parsingPokemon: parseDataForEvolutionRecursion(data, prevoPokemon),\n          recursingAs: 'preevolutions'\n        })\n      );\n    }\n\n    addPropertyToObjectFieldBased({\n      objectTarget: pokemonData,\n      propertyKey: 'preevolutions',\n      propertyValue: preevolutionChain,\n      requestedFields,\n      fieldAccessor: `${resolvedRecursingAs}preevolutions`\n    });\n  }\n\n  if ((requestedFields as GraphQLSet<string>).has(`${resolvedRecursingAs}evolutions`) && data.evos && data.evos[0] !== parsingPokemon) {\n    for (const evo of data.evos) {\n      const evoPokemon = pokedex.get(toLowerSingleWordCase(evo));\n      if (evoPokemon) {\n        evolutionChain.push(\n          mapPokemonDataToPokemonGraphQL({\n            data: pokedex.get(toLowerSingleWordCase(evoPokemon.species))!,\n            requestedFields,\n            ...basePokemonArgs,\n            parsingPokemon: parseDataForEvolutionRecursion(data, evoPokemon),\n            recursingAs: 'evolutions'\n          })\n        );\n      }\n    }\n\n    addPropertyToObjectFieldBased({\n      objectTarget: pokemonData,\n      propertyKey: 'evolutions',\n      propertyValue: evolutionChain,\n      requestedFields,\n      fieldAccessor: `${resolvedRecursingAs}evolutions`\n    });\n  }\n\n  return pokemonData;\n}\n\nfunction resolvedNestedAbility(abilityKey: string | undefined, abilityRequestedFields: GraphQLSet<keyof Ability>): Ability | undefined {\n  if (abilityKey) {\n    const abilityFromDataset = abilities.get(abilityKey);\n\n    if (abilityFromDataset) {\n      return mapAbilityDataToAbilityGraphQL({\n        data: abilityFromDataset,\n        requestedFields: abilityRequestedFields,\n        referencedCall: AbilityReferencedCallIdentifier.PokemonToAbility\n      });\n    }\n  }\n\n  return undefined;\n}\n\nfunction resolveNestedType(type: UnwrapArray<PokemonTypes.DexEntry['types']>, typeRequestedFields: GraphQLSet<keyof TypeMatchup>): TypeMatchup {\n  return mapTypesToTypeMatchupGraphQL({ primaryType: toLowerSingleWordCase(type) as TypesEnum }, typeRequestedFields);\n}\n\nfunction resolvedNestedLearnset(\n  pokemon: string,\n  generation: Exclude<Generation, 1 | 2>,\n  pokemonLearnsetRequestedFields: GraphQLSet<keyof PokemonLearnset>\n): PokemonLearnset | null {\n  const learnsetFromDataset = getLearnsetDataset(pokemon);\n\n  if (!learnsetFromDataset) {\n    return null;\n  }\n\n  return mapPokemonToPokemonLearnsetGraphQL({\n    learnsetFromDataset,\n    generation,\n    requestedFields: pokemonLearnsetRequestedFields\n  });\n}\n\nfunction parseBaseStatsTotal(baseStats: PokemonTypes.Stats) {\n  return baseStats.hp + baseStats.atk + baseStats.def + baseStats.spa + baseStats.spd + baseStats.spe;\n}\n\nfunction parseMinimumHatchTimeForMaximumHatchTime(minimumHatchTime?: number) {\n  return minimumHatchTime ? minimumHatchTime + 256 : undefined;\n}\n\nfunction parseSpeciesForBulbapedia(pokemonData: PokemonTypes.DexEntry) {\n  if (pokemonData.specialBulbapediaUrl) {\n    return bulbapediaBaseUrlPrefix + pokemonData.specialBulbapediaUrl + bulbapediaBaseUrlPostfix;\n  }\n\n  if (pokemonData.baseSpecies) {\n    return bulbapediaBaseUrlPrefix + pokemonData.baseSpecies + bulbapediaBaseUrlPostfix;\n  }\n\n  return bulbapediaBaseUrlPrefix + pokemonData.species + bulbapediaBaseUrlPostfix;\n}\n\n/**\n * Parses data from a Pok√©mon into a valid Serebii URL\n * @param pokemonName The name of the Pok√©mon to parse, required for new Serebii pages\n * @param pokemonNumber The number of the Pok√©mon to parse, required for old Serebii pages\n * @param pokemonTier The smogon tier of the Pok√©mon, required to check if the Pok√©mon is available in Generation 9\n */\nfunction parseSpeciesForSerebiiPage(pokemonName: string, pokemonNumber: number, pokemonTier: string) {\n  // If the Pok√©mon has a number of 0 or lower (0 is Missingno, negatives are Smogon CAP and Pok√©Star) then it doesn't have a Serebii page\n  if (pokemonNumber <= 0) return '';\n\n  const parsedPokemonName = toLowerHyphenCase(pokemonName.replace(/:/g, ''));\n\n  // If the Pok√©mon is not in Generation 8 or 9 then build a Generation 7 based URL\n  if (speciesThatAreNotInGeneration8Nor9.includes(parsedPokemonName)) {\n    return `${serebiiBaseUrl}-sm/${pokemonNumber < 100 ? pokemonNumber.toString().padStart(3, '0') : pokemonNumber}.shtml`;\n  }\n\n  // If the Pok√©mon is `'past'` in Generation 9, but was not included in speciesThatAreNotInGeneration8Nor9\n  // or the Pok√©mon is within the numbers range for generation 8,\n  // then build a Generation 8 based URL\n  if (pokemonTier.toLowerCase() === 'past' || (pokemonNumber >= 810 && pokemonNumber <= 905)) {\n    return `${serebiiBaseUrl}-swsh/${pokemonName.replace(/ /g, '').toLowerCase()}`;\n  }\n\n  // If the Pok√©mon is available in Generation 9 then build a Generation 9 based URL\n  return `${serebiiBaseUrl}-sv/${pokemonName.replace(/ /g, '').toLowerCase()}`;\n}\n\nfunction parseDataForEvolutionRecursion(basePokemonData: PokemonTypes.DexEntry, _: PokemonTypes.DexEntry) {\n  if (basePokemonData.forme) {\n    return toLowerSingleWordCase(basePokemonData.species);\n  }\n\n  return toLowerSingleWordCase(basePokemonData.baseSpecies || basePokemonData.species);\n}\n\n/**\n * Parses data from a Pok√©mon into a valid Smogon Dex URL\n * @param pokemonName The name of the Pok√©mon to parse\n * @param pokemonNumber The number of the Pok√©mon to parse\n * @param pokemonTier The smogon tier of the Pok√©mon, required to check if the Pok√©mon is available in Generation 9\n */\nfunction parseSpeciesForSmogonPage(pokemonName: string, pokemonNumber: number, pokemonTier: string) {\n  // If the Pok√©mon is Missingno, then it doesn't have a Smogon Dex page\n  if (pokemonNumber === 0) return '';\n\n  const parsedPokemonName = toLowerHyphenCase(pokemonName.replace(/:/g, ''));\n\n  // If the Pok√©mon has a number of lower than 0 then it is CAP so we can always send the latest generation URL\n  if (pokemonNumber < 0) {\n    return `${smogonBaseUrl}/sv/pokemon/${parsedPokemonName}`;\n  }\n\n  // If the Pok√©mon is not in Generation 8 or 9 then build a Generation 7 based URL\n  if (speciesThatAreNotInGeneration8Nor9.includes(parsedPokemonName)) {\n    return `${smogonBaseUrl}/sm/pokemon/${parsedPokemonName}`;\n  }\n\n  // If the Pok√©mon is `'past'` in Generation 9, but was not included in `speciesThatAreNotInGeneration8Nor9`\n  // or the Pok√©mon is within the numbers range for generation 8,\n  // then build a Generation 8 based URL\n  if (pokemonTier.toLowerCase() === 'past' || (pokemonNumber >= 810 && pokemonNumber <= 905)) {\n    return `${smogonBaseUrl}/ss/pokemon/${parsedPokemonName}`;\n  }\n\n  // If the Pok√©mon is available in Generation 9 then build a Generation 9 based URL\n  return `${smogonBaseUrl}/sv/pokemon/${parsedPokemonName}`;\n}\n\nexport const enum PokemonReferencedCallIdentifier {\n  None = 'none',\n  AbilityToPokemon = 'abilityToPokemon',\n  MoveToPokemon = 'moveToPokemon'\n}\n\ninterface MapPokemonDataToPokemonGraphQLParameters {\n  data: PokemonTypes.DexEntry;\n  requestedFields: GraphQLSet<keyof Pokemon>;\n  offsetFlavorTexts: number;\n  takeFlavorTexts: number;\n  reverseFlavorTexts: boolean;\n  referencedCall?: PokemonReferencedCallIdentifier;\n  parsingPokemon?: string;\n  recursingAs?: 'preevolutions' | 'evolutions' | false;\n}\n"],"mappings":"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","names":["PokemonReferencedCallIdentifier"]}