{"version":3,"sources":["../../../src/lib/mappers/typeMatchupMapper.ts"],"sourcesContent":["import type { PokemonTypes } from '#assets/pokemon-source';\nimport { typechart } from '#assets/typechart';\nimport type { TypeEffectiveness, TypeMatchup } from '#types';\nimport { addPropertyToObjectFieldBased } from '#utils/addPropertyToObject';\nimport type { GraphQLSet } from '#utils/GraphQLSet';\nimport type { GetTypeMatchupArgs } from '#validations/getTypeMatchupArgs';\nimport { filterNullish } from '@sapphire/utilities';\n\nexport function mapTypesToTypeMatchupGraphQL(args: GetTypeMatchupArgs, requestedFields: GraphQLSet<keyof TypeMatchup>): TypeMatchup {\n  const atk: PokemonTypes.TypeDataset = {\n    doubleEffectiveTypes: [],\n    doubleResistedTypes: [],\n    effectiveTypes: [],\n    effectlessTypes: [],\n    multi: {\n      bug: 1,\n      dark: 1,\n      dragon: 1,\n      electric: 1,\n      fairy: 1,\n      fighting: 1,\n      fire: 1,\n      flying: 1,\n      ghost: 1,\n      grass: 1,\n      ground: 1,\n      ice: 1,\n      normal: 1,\n      poison: 1,\n      psychic: 1,\n      rock: 1,\n      steel: 1,\n      water: 1\n    },\n    normalTypes: [],\n    resistedTypes: []\n  };\n\n  const def: PokemonTypes.TypeDataset = JSON.parse(JSON.stringify(atk));\n\n  if (args.primaryType === args.secondaryType) {\n    args.secondaryType = null;\n  }\n\n  const typesAsArray = [args.primaryType, args.secondaryType].filter(filterNullish);\n\n  for (const curType of typesAsArray) {\n    const dDealt = typechart.get(curType)!.damageDealt;\n    const dTaken = typechart.get(curType)!.damageTaken;\n\n    for (const [type, multiplier] of Object.entries(dTaken) as [keyof PokemonTypes.Types, 1 | 2 | 3][]) {\n      switch (multiplier) {\n        case 1:\n          def.multi[type] *= 2;\n          break;\n        case 2:\n          def.multi[type] *= 0.5;\n          break;\n        case 3:\n          def.multi[type] = 0;\n          break;\n      }\n    }\n\n    for (const [type, multiplier] of Object.entries(dDealt) as [keyof PokemonTypes.Types, 1 | 2 | 3][]) {\n      switch (multiplier) {\n        case 1:\n          atk.multi[type] *= 2;\n          break;\n        case 2:\n          atk.multi[type] *= 0.5;\n          break;\n        case 3:\n          atk.multi[type] = 0;\n          break;\n      }\n    }\n  }\n\n  const attackingTypeEntry: TypeEffectiveness = {} as TypeEffectiveness;\n  const defendingTypeEntry: TypeEffectiveness = {} as TypeEffectiveness;\n\n  if (requestedFields.has('attacking')) {\n    for (const [attack, multiplier] of Object.entries(atk.multi) as [keyof PokemonTypes.Types, 0 | 0.25 | 0.5 | 1 | 2 | 4][]) {\n      switch (multiplier) {\n        case 0:\n          atk.effectlessTypes.push(attack);\n          break;\n        case 0.25:\n          atk.doubleResistedTypes.push(attack);\n          break;\n        case 0.5:\n          atk.resistedTypes.push(attack);\n          break;\n        case 1:\n          atk.normalTypes.push(attack);\n          break;\n        case 2:\n          atk.effectiveTypes.push(attack);\n          break;\n        case 4:\n          atk.doubleEffectiveTypes.push(attack);\n          break;\n      }\n    }\n\n    const attackingTypeEntryFields = requestedFields.filterStartsWith<keyof TypeEffectiveness>('attacking.', true);\n    addPropertyToObjectFieldBased({\n      objectTarget: attackingTypeEntry,\n      propertyKey: 'doubleEffectiveTypes',\n      propertyValue: atk.doubleEffectiveTypes,\n      requestedFields: attackingTypeEntryFields\n    });\n    addPropertyToObjectFieldBased({\n      objectTarget: attackingTypeEntry,\n      propertyKey: 'doubleResistedTypes',\n      propertyValue: atk.doubleResistedTypes,\n      requestedFields: attackingTypeEntryFields\n    });\n    addPropertyToObjectFieldBased({\n      objectTarget: attackingTypeEntry,\n      propertyKey: 'effectiveTypes',\n      propertyValue: atk.effectiveTypes,\n      requestedFields: attackingTypeEntryFields\n    });\n    addPropertyToObjectFieldBased({\n      objectTarget: attackingTypeEntry,\n      propertyKey: 'effectlessTypes',\n      propertyValue: atk.effectlessTypes,\n      requestedFields: attackingTypeEntryFields\n    });\n    addPropertyToObjectFieldBased({\n      objectTarget: attackingTypeEntry,\n      propertyKey: 'normalTypes',\n      propertyValue: atk.normalTypes,\n      requestedFields: attackingTypeEntryFields\n    });\n    addPropertyToObjectFieldBased({\n      objectTarget: attackingTypeEntry,\n      propertyKey: 'resistedTypes',\n      propertyValue: atk.resistedTypes,\n      requestedFields: attackingTypeEntryFields\n    });\n  }\n\n  if (requestedFields.has('defending')) {\n    for (const [defense, multiplier] of Object.entries(def.multi) as [keyof PokemonTypes.Types, 0 | 0.25 | 0.5 | 1 | 2 | 4][]) {\n      switch (multiplier) {\n        case 0:\n          def.effectlessTypes.push(defense);\n          break;\n        case 0.25:\n          def.doubleResistedTypes.push(defense);\n          break;\n        case 0.5:\n          def.resistedTypes.push(defense);\n          break;\n        case 1:\n          def.normalTypes.push(defense);\n          break;\n        case 2:\n          def.effectiveTypes.push(defense);\n          break;\n        case 4:\n          def.doubleEffectiveTypes.push(defense);\n          break;\n      }\n    }\n\n    const defendingTypeEntryFields = requestedFields.filterStartsWith<keyof TypeEffectiveness>('defending.', true);\n    addPropertyToObjectFieldBased({\n      objectTarget: defendingTypeEntry,\n      propertyKey: 'doubleEffectiveTypes',\n      propertyValue: def.doubleEffectiveTypes,\n      requestedFields: defendingTypeEntryFields\n    });\n    addPropertyToObjectFieldBased({\n      objectTarget: defendingTypeEntry,\n      propertyKey: 'doubleResistedTypes',\n      propertyValue: def.doubleResistedTypes,\n      requestedFields: defendingTypeEntryFields\n    });\n    addPropertyToObjectFieldBased({\n      objectTarget: defendingTypeEntry,\n      propertyKey: 'effectiveTypes',\n      propertyValue: def.effectiveTypes,\n      requestedFields: defendingTypeEntryFields\n    });\n    addPropertyToObjectFieldBased({\n      objectTarget: defendingTypeEntry,\n      propertyKey: 'effectlessTypes',\n      propertyValue: def.effectlessTypes,\n      requestedFields: defendingTypeEntryFields\n    });\n    addPropertyToObjectFieldBased({\n      objectTarget: defendingTypeEntry,\n      propertyKey: 'normalTypes',\n      propertyValue: def.normalTypes,\n      requestedFields: defendingTypeEntryFields\n    });\n    addPropertyToObjectFieldBased({\n      objectTarget: defendingTypeEntry,\n      propertyKey: 'resistedTypes',\n      propertyValue: def.resistedTypes,\n      requestedFields: defendingTypeEntryFields\n    });\n  }\n\n  const typeMatchups: TypeMatchup = {} as TypeMatchup;\n  addPropertyToObjectFieldBased({ objectTarget: typeMatchups, propertyKey: 'attacking', propertyValue: attackingTypeEntry, requestedFields });\n  addPropertyToObjectFieldBased({ objectTarget: typeMatchups, propertyKey: 'defending', propertyValue: defendingTypeEntry, requestedFields });\n\n  return typeMatchups;\n}\n"],"mappings":"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","names":[]}